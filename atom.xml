<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>菜鸟Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://vincent-vic.gitee.io/"/>
  <updated>2020-03-23T10:38:23.041Z</updated>
  <id>https://vincent-vic.gitee.io/</id>
  
  <author>
    <name>Vincent Vic</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Socket学习笔记之入门1</title>
    <link href="https://vincent-vic.gitee.io/2020/03/23/socket-xue-xi-bi-ji-zhi-ru-men-1/"/>
    <id>https://vincent-vic.gitee.io/2020/03/23/socket-xue-xi-bi-ji-zhi-ru-men-1/</id>
    <published>2020-03-23T07:15:00.000Z</published>
    <updated>2020-03-23T10:38:23.041Z</updated>
    
    <content type="html"><![CDATA[<p>一个简单的SocketDemo快速入门</p><h3 id="简单了解Socket"><a href="#简单了解Socket" class="headerlink" title="简单了解Socket"></a>简单了解Socket</h3><h5 id="Socket概述"><a href="#Socket概述" class="headerlink" title="Socket概述"></a>Socket概述</h5><blockquote><p>Socket是TCP/IP协议的编程模型，是提供两台计算机通信的网络编程接口，主要通过TCP/IP协议中的传输层的TCP,UDP协议的操作实体</p></blockquote><h5 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h5><hr><blockquote><p>TCP（Transmission Control Protocol，传输控制协议）:面向连接的传输</p><p>UDP（User Datagram Protocol，用户数据包协议）:面向连接</p><p>简而言之，TCP是需要确认消息的传输，而UDP是只管发送，不需要存在连接</p><p>IP （网络之间互连的协议）：主要区分局域网IP和公网IP</p><p>Prot (端口)：用于区分计算机服务的一个访问手段</p></blockquote><hr><h3 id="Soket-Demo分解"><a href="#Soket-Demo分解" class="headerlink" title="Soket Demo分解"></a>Soket Demo分解</h3><h5 id="C-S模式"><a href="#C-S模式" class="headerlink" title="C/S模式"></a>C/S模式</h5><p><img src="/" alt="C/S" class="lazyload" data-src="/images/socket/dome20200323/base0.png"></p><blockquote><p>在TCP/IP网络应用中，通信的两个进程间相互作用的主要模式是客户/服务器（Client/Server, C/S）模式，即客户向服务器发出服务请求，服务器接收到请求后，提供相应的服务。</p></blockquote><p><img src="/" alt="C/S" class="lazyload" data-src="/images/socket/dome20200323/base.png"></p><p>通过Socket建立一个简单的客户端与服务端的通信。</p><hr><h5 id="服务端的建立"><a href="#服务端的建立" class="headerlink" title="服务端的建立"></a>服务端的建立</h5><blockquote><p>ps：本文采用Java作为例子，本文以TCP协议作为第一个Demo的小例子</p></blockquote><p>我们需要创建服务端</p><p>Java提供了服务端的ServerSocket这个类，我们可以通过这个类去实现服务端的建立</p><pre class="line-numbers language-java"><code class="language-java">ServerSocket serverSocket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span>Prot<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//建立绑定端口</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>建立完就是开始监听客户端的消息</p><p>使用ServerSocket中的accept()方法</p><pre class="line-numbers language-java"><code class="language-java">Socket client <span class="token operator">=</span> serverSocket<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//等待客户端连接</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><p><img src="/" alt="监听处理" class="lazyload" data-src="/images/socket/dome20200323/accept.png"></p><p>监听会一直等待到客户端的连接，当连接成功就进行下一步的消息处理</p><p>消息监听处理代码</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//循环监听</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"监听"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//等待客户端连接</span>        Socket client <span class="token operator">=</span> serverSocket<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//发送到客户端 </span>        <span class="token comment" spellcheck="true">//TODO 后续解说，这里体现监听处理操作</span>        <span class="token comment" spellcheck="true">//从客户端接收一行</span>        <span class="token comment" spellcheck="true">//TODO 后续解说，这里体现监听处理操作</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"客户端消息：xxxx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/" alt="通信过程过程" class="lazyload" data-src="/images/socket/dome20200323/accept2.gif"></p><p>如图客户1连接正在通信，此时一个新的用户的请求连接服务端未能及时响应，一直等待服务端的接收，直到客户1断开连接，服务端重新监听，才接收了客户2的连接，意味着上一个客户端连接如果没有断开，会一直占用服务端的处理</p><hr><p><img src="/" alt="多线程处理" class="lazyload" data-src="/images/socket/dome20200323/accept3.gif"></p><p>本图为了实现多个客户端，我们一般通过开一个线程的方式去处理用户连接后的消息，服务端主要复制接收连接和创建线程去处理消息，这样就不会多客户的需要频繁等待，像上一个客户如果一直未响应就影响后续的客户的操作。</p><p>多线程创建</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//这里采用嵌套静态子类，也可以单独创建一个外部类</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ClientHandler</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>        <span class="token keyword">private</span> Socket socket <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">ClientHandler</span><span class="token punctuation">(</span>Socket socket<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>socket <span class="token operator">=</span> socket<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"新客户端连接-ip:"</span><span class="token operator">+</span>socket<span class="token punctuation">.</span><span class="token function">getLocalAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"/Port:"</span><span class="token operator">+</span>socket<span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">handleMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//自定义处理消息函数，见后文</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h5 id="客户端建立"><a href="#客户端建立" class="headerlink" title="客户端建立"></a>客户端建立</h5><p>创建客户端Socket对象</p><pre class="line-numbers language-java"><code class="language-java">Socket socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>建立服务器连接</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//设置超时时间</span>socket<span class="token punctuation">.</span><span class="token function">setSoTimeout</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//连接本地服务器，端口怕0000，超时3000ms</span>socket<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span>Inet4Address<span class="token punctuation">.</span><span class="token function">getLocalHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>Prot<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>InetSocketAddress</p><blockquote><p>该类实现了可序列化接口，直接继承自java.net.SocketAddress类，类声明如下： public class InetSocketAddress extends SocketAddress</p></blockquote><p>Inet4Address.getLocalHost()</p><blockquote><p>获取本地地址</p></blockquote><hr><h5 id="Socket通信"><a href="#Socket通信" class="headerlink" title="Socket通信"></a>Socket通信</h5><p>已经建立好了连接，那接下来就是客户端与服务端的通信过程</p><p>我这里封装发送和接受消息的两个类</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//读取类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SoketInputUtil</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Socket socket <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">private</span> BufferedReader soketReader <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">private</span> InputStream inputStream <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">SoketInputUtil</span><span class="token punctuation">(</span>Socket socket<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>socket <span class="token operator">=</span> socket<span class="token punctuation">;</span>        inputStream <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        soketReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">readMag</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//从服务器接收一行</span>        <span class="token keyword">return</span> soketReader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//关闭资源 TODO    }</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//发送消息类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SoketOutputUtil</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Socket socket <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">private</span> PrintStream soketPrintStream <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">private</span> OutputStream outputStream <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">SoketOutputUtil</span><span class="token punctuation">(</span>Socket socket<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>socket <span class="token operator">=</span> socket<span class="token punctuation">;</span>        outputStream <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        soketPrintStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintStream</span><span class="token punctuation">(</span>outputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Boolean <span class="token function">sendMsg</span><span class="token punctuation">(</span>String info<span class="token punctuation">)</span>  <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//发送到服务器</span>        soketPrintStream<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//关闭资源 TODO }</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>服务端和客户端处理消息的逻辑大致一致，为了方便简洁我这里写成函数</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//处理消息函数</span><span class="token keyword">private</span> Boolean <span class="token function">handleMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            SoketOutputUtil soketOutput <span class="token operator">=</span> null<span class="token punctuation">;</span>            SoketInputUtil soketInput <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">do</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//客户端消息代码可以从这个代码修改</span>                <span class="token comment" spellcheck="true">//=================================</span>                    <span class="token comment" spellcheck="true">//发送到客户端</span>                    soketOutput <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SoketOutputUtil</span><span class="token punctuation">(</span>socket<span class="token punctuation">)</span><span class="token punctuation">;</span>                    soketOutput<span class="token punctuation">.</span><span class="token function">sendMsg</span><span class="token punctuation">(</span><span class="token string">"hello www.iflags.cn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//从客户端接收一行</span>                    soketInput <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SoketInputUtil</span><span class="token punctuation">(</span>socket<span class="token punctuation">)</span><span class="token punctuation">;</span>                    String echo <span class="token operator">=</span> soketInput<span class="token punctuation">.</span><span class="token function">readMag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//判断服务器是否断开连接</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"bye"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>echo<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//打印服务器发送的信息</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>echo<span class="token punctuation">)</span><span class="token punctuation">;</span>                        soketOutput<span class="token punctuation">.</span><span class="token function">sendMsg</span><span class="token punctuation">(</span><span class="token string">"回送:"</span><span class="token operator">+</span>echo<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">//=================================</span>                <span class="token punctuation">}</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                soketInput<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                soketOutput<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"断开连接"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//发送</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>补充服务端监听代码</p><pre class="line-numbers language-java"><code class="language-java"> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//循环监听</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"监听"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//等待客户端连接</span>    Socket client <span class="token operator">=</span> serverSocket<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//加入多线程</span>    ClientHandler clientHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClientHandler</span><span class="token punctuation">(</span>client<span class="token punctuation">)</span><span class="token punctuation">;</span>    clientHandler<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>本文包含一些个人简单的封装逻辑，菜鸡写的小demo，可能存在一些问题完整代码可以访问连接查看：<a href="https://gitee.com/Vincent-Vic/SocketLearn/tree/master/src/main/java/cn/vic/soket/demo1" target="_blank" rel="noopener">SocketBaseDemo1</a>,<a href="https://gitee.com/Vincent-Vic/SocketLearn/tree/master/src/main/java/cn/vic/soket" target="_blank" rel="noopener">简单封装的Util</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一个简单的SocketDemo快速入门&lt;/p&gt;
&lt;h3 id=&quot;简单了解Socket&quot;&gt;&lt;a href=&quot;#简单了解Socket&quot; class=&quot;headerlink&quot; title=&quot;简单了解Socket&quot;&gt;&lt;/a&gt;简单了解Socket&lt;/h3&gt;&lt;h5 id=&quot;Socket
      
    
    </summary>
    
    
      <category term="Socket" scheme="https://vincent-vic.gitee.io/categories/Socket/"/>
    
    
      <category term="Socket" scheme="https://vincent-vic.gitee.io/tags/Socket/"/>
    
      <category term="网络编程" scheme="https://vincent-vic.gitee.io/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>二分搜索树</title>
    <link href="https://vincent-vic.gitee.io/2020/03/20/er-fen-sou-suo-shu/"/>
    <id>https://vincent-vic.gitee.io/2020/03/20/er-fen-sou-suo-shu/</id>
    <published>2020-03-20T08:13:00.000Z</published>
    <updated>2020-03-23T09:37:47.489Z</updated>
    
    <content type="html"><![CDATA[<p>Binary Search Tree</p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><img src="/" alt="tree" class="lazyload" data-src="/images/BST/tree20200320/tree0.jpg"></p><blockquote><p> 二分搜索树是在二叉树结构上实现的一种数据结构；搜索树主要是用来实现快速查找的字典结构，结构主要特点，左小右大。 </p></blockquote><p>本文主要以图片和代码实现来探讨一个最简单的二叉搜索树（C++版）</p><h3 id="功能概况"><a href="#功能概况" class="headerlink" title="功能概况"></a>功能概况</h3><p>类的定义,也分别介绍这些基础算法</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> Key<span class="token punctuation">,</span><span class="token keyword">typename</span> Value<span class="token operator">></span><span class="token keyword">class</span> <span class="token class-name">BinarySearchTree</span> <span class="token punctuation">{</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">struct</span> Node<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//节点结构体</span>        Key key<span class="token punctuation">;</span>Value value<span class="token punctuation">;</span>Node<span class="token operator">*</span> left<span class="token punctuation">;</span> Node<span class="token operator">*</span> right<span class="token punctuation">;</span>        <span class="token function">Node</span><span class="token punctuation">(</span>Key key<span class="token punctuation">,</span>Value value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Node</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> node<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//拷贝函数</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    Node <span class="token operator">*</span> root<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//树根</span>    <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>Key key<span class="token punctuation">,</span>Value value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//插入</span>    <span class="token keyword">bool</span> <span class="token function">contain</span><span class="token punctuation">(</span>Key key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//判断键值是否存在</span>    Value<span class="token operator">*</span> <span class="token function">search</span><span class="token punctuation">(</span>Key key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//查找</span>    <span class="token keyword">void</span> <span class="token function">preOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//深度优先遍历(DFS) 先序遍历</span>    <span class="token keyword">void</span> <span class="token function">inOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//深度优先遍历(DFS) 中序遍历 有序遍历二分搜索树</span>    <span class="token comment" spellcheck="true">//深度优先遍历(DFS) 后续遍历</span>    <span class="token keyword">void</span> <span class="token function">postOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">levelOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//广度优先遍历(BFS) 层次遍历-队列实现</span>    Key <span class="token function">maximum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//查找最大值</span>    Key <span class="token function">minimum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//查找最小值</span>    <span class="token keyword">void</span> <span class="token function">removeMin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//删除最小值</span>    <span class="token keyword">void</span> <span class="token function">removeMax</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//删除最大值</span>    <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span>Key key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//删除节点  Hubbard Deletion思想</span>    <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> node<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//销毁树 后序遍历的应用</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="搜索树的插入及修改"><a href="#搜索树的插入及修改" class="headerlink" title="搜索树的插入及修改"></a>搜索树的插入及修改</h3><p><img src="/" alt="insert" class="lazyload" data-src="/images/BST/tree20200320/tree1.gif"></p><blockquote><p>那我们看插入结构的的动态图，小插左子树中，大插右子树中，最好实现思路就是递归策略</p></blockquote><blockquote><p>修改于插入一样的方法，本版本中不支持key相同，已存在的Key值作为修改操作</p></blockquote><blockquote><p>插入的代码实现</p></blockquote><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//插入的调用接口</span><span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>Key key<span class="token punctuation">,</span>Value value<span class="token punctuation">)</span><span class="token punctuation">{</span>        root <span class="token operator">=</span> <span class="token function">insert</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 以node为根递归插入     * 形成左小右大的二分搜索树逻辑     * @return 新的节点或者修改的点     */</span>    Node<span class="token operator">*</span> <span class="token function">insert</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> node <span class="token punctuation">,</span> Key key <span class="token punctuation">,</span> Value value<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//递归结束条件：当前节点为空，将节点插</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token function">Node</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//创建新节点</span>        <span class="token punctuation">}</span>         <span class="token keyword">if</span><span class="token punctuation">(</span> key <span class="token operator">==</span> node<span class="token operator">-</span><span class="token operator">></span>key<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//如果key已经存在，替换key旧的值value</span>             node<span class="token operator">-</span><span class="token operator">></span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>         <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>key <span class="token operator">&lt;</span> node<span class="token operator">-</span><span class="token operator">></span>key<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//key小于当前节点key 从左子树递归插入</span>             node<span class="token operator">-</span><span class="token operator">></span>left <span class="token operator">=</span> <span class="token function">insert</span><span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">,</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">else</span>   <span class="token comment" spellcheck="true">//此时key大于当前节点key，向右子树递归插入</span>             node<span class="token operator">-</span><span class="token operator">></span>right <span class="token operator">=</span> <span class="token function">insert</span><span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">,</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> node<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这当中的Key是存放在树中节点的位置的关键和Value则是key对应的数据，实现通过key去获取value，本文Key,Value是模板参数，可以根据用户指定数据类型</p></blockquote><blockquote><p>本文代码实现对用户隐藏具体实现，像这样的用户调用接口，下文只出现具体实现，不过多赘述</p></blockquote><hr><h3 id="搜索树的查找"><a href="#搜索树的查找" class="headerlink" title="搜索树的查找"></a>搜索树的查找</h3><blockquote><p>关于树的查找，这里先来分析的一下怎么找到一个树的最大值最小值</p></blockquote><p><img src="/" alt="search" class="lazyload" data-src="/images/BST/tree20200320/tree2.gif"></p><blockquote><p>再谈树的定义，左节点比根节点小，右节点比根节点小，可以把这看成一个子问题；那最小值不就在左子树里面的左子树的左节点，这一句话似乎有点递归，如果这有点绕，那看图可以知道最左边的那个节点就是最小值</p></blockquote><p><img src="/" alt="search" class="lazyload" data-src="/images/BST/tree20200320/tree3.gif"></p><blockquote><p>那么左子树的左节点不存在呢，那么看图很明显就看得出来是最左边的根节点，右子树也同理</p></blockquote><blockquote><p>查找最大值/最小值代码实现</p></blockquote><pre class="line-numbers language-cpp"><code class="language-cpp">    <span class="token comment" spellcheck="true">//以node为根的二叉树 查找最大值</span>    Node<span class="token operator">*</span> <span class="token function">maximum</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> node<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span>right <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//如果右节点不存在，当前节点即最大</span>            <span class="token keyword">return</span> node<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">maximum</span><span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//存在右节点继续递归查找</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//以node为根的二叉树 查找最小值</span>    Node<span class="token operator">*</span> <span class="token function">minimum</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> node<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span>left <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//如果左节点不存在，当前节点即最小</span>            <span class="token keyword">return</span> node<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">minimum</span><span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//存在左节点继续递归查找</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>那我们再来看查找一个节点的逻辑，这里实现contain和search均属于查找基本的思路</p></blockquote><p><img src="/" alt="preOrder" class="lazyload" data-src="/images/BST/tree20200320/tree4.gif"></p><blockquote><p>二分查找的思路还是很简单的，数组的二分查找使用折半法，这里通过左子树，右子树对半的思路</p></blockquote><blockquote><p>查找一个节点的代码实现</p></blockquote><pre class="line-numbers language-cpp"><code class="language-cpp">    <span class="token comment" spellcheck="true">// 以node为根的二叉树中判断树中是否包含键值key的节点</span>    <span class="token keyword">bool</span> <span class="token function">contain</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> node<span class="token punctuation">,</span>Key key<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> node<span class="token operator">-</span><span class="token operator">></span>key<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//如果键值与当前相等说明存在返回true</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>key <span class="token operator">&lt;</span> node<span class="token operator">-</span><span class="token operator">></span>key<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//key 小于当前节点key 从左子树递归查找判断key是否存在</span>            <span class="token keyword">return</span> <span class="token function">contain</span><span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>   <span class="token comment" spellcheck="true">//此时key大于当前节点key，向右子树递归查找判断key是否存在</span>            <span class="token keyword">return</span> <span class="token function">contain</span><span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 以node为根的二叉树中查找节点  @return value地址</span>    Value<span class="token operator">*</span> <span class="token function">search</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> node<span class="token punctuation">,</span>Key key<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> key <span class="token operator">==</span> node<span class="token operator">-</span><span class="token operator">></span>key<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>key <span class="token operator">&lt;</span> node<span class="token operator">-</span><span class="token operator">></span>key<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//key 小于当前节点key 从左子树递归查找判断key是否存在</span>            <span class="token keyword">return</span> <span class="token function">search</span><span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>   <span class="token comment" spellcheck="true">//此时key大于当前节点key，向右子树递归查找判断key是否存在</span>            <span class="token keyword">return</span> <span class="token function">search</span><span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>contain实现判断key是否存在，search查找返回Value值，两者实现除了返回结果不一致，思路实现一模一样，本文二分搜索树以递归实现</p></blockquote><hr><h3 id="深度优先遍历-DFS"><a href="#深度优先遍历-DFS" class="headerlink" title="深度优先遍历(DFS)"></a>深度优先遍历(DFS)</h3><p><img src="/" alt="preOrder" class="lazyload" data-src="/images/BST/tree20200320/tree5.gif"></p><blockquote><p>先序遍历：对任一子树，先访问根，然后遍历其左子树，最后遍历其右子树。(巧记根左右)</p></blockquote><p><img src="/" alt="inOrder" class="lazyload" data-src="/images/BST/tree20200320/tree6.gif"></p><blockquote><p>中序遍历：对任一子树，先遍历其左子树，然后访问根，最后遍历其右子树。(巧记左根右)</p></blockquote><p><img src="/" alt="postOrder" class="lazyload" data-src="/images/BST/tree20200320/tree7.gif"></p><blockquote><p>后序遍历：对任一子树，先遍历其左子树，然后遍历其右子树，最后访问根。(巧记左右根)</p></blockquote><blockquote><p>深度优先遍历实现代码</p></blockquote><pre class="line-numbers language-cpp"><code class="language-cpp">    <span class="token comment" spellcheck="true">//以node为根的二叉树 进行先序遍历</span>    <span class="token keyword">void</span> <span class="token function">preOrder</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> node<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            cout<span class="token operator">&lt;&lt;</span>node<span class="token operator">-</span><span class="token operator">></span>key <span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>            <span class="token function">preOrder</span><span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">preOrder</span><span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 以node为根的二叉树 进行中序遍历 有序遍历二分搜索树</span>    <span class="token keyword">void</span> <span class="token function">inOrder</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> node<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">preOrder</span><span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            cout<span class="token operator">&lt;&lt;</span>node<span class="token operator">-</span><span class="token operator">></span>key <span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>            <span class="token function">preOrder</span><span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//以node为根的二叉树 进行后续遍历</span>    <span class="token keyword">void</span> <span class="token function">postOrder</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> node<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">preOrder</span><span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">preOrder</span><span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>            cout<span class="token operator">&lt;&lt;</span>node<span class="token operator">-</span><span class="token operator">></span>key <span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>三种遍历遍历的实现均为递归策略，根据二分搜索树的定义和中序遍历的规则可以实现二叉树有序遍历，而后续遍历的特点可以作为树销毁的过程</p></blockquote><blockquote><p>树销毁的实现，可以与后续遍历进行比较</p></blockquote><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//销毁树 后序遍历的应用</span>    <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> node<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">destroy</span><span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//销毁左子树</span>            <span class="token function">destroy</span><span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//销毁右子树</span>            <span class="token keyword">delete</span>  node<span class="token punctuation">;</span> node <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//删除节点</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="广度优先遍历-BFS"><a href="#广度优先遍历-BFS" class="headerlink" title="广度优先遍历(BFS)"></a>广度优先遍历(BFS)</h3><blockquote><p>看完深度优先遍历，那就看一下广度优先遍历，也就是层次遍历</p></blockquote><p><img src="/" alt="BFS" class="lazyload" data-src="/images/BST/tree20200320/tree8.gif"></p><blockquote><p>按逐层遍历每一个节点，最简单的方式就是借助一个队列把每一层信息加入进来</p></blockquote><blockquote><p>广度优先遍历实现</p></blockquote><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//广度优先遍历(BFS) 层次遍历-队列实现</span>    <span class="token keyword">void</span> <span class="token function">levelOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        queue<span class="token operator">&lt;</span>Node<span class="token operator">*</span><span class="token operator">></span> q<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//存放Node的队列</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//判断树空的情况</span>            cout<span class="token operator">&lt;&lt;</span><span class="token string">"Tree Null"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            Node<span class="token operator">*</span> node <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//取出第一个值</span>            q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将第一个值出队，以便遍历下一个值</span>            cout<span class="token operator">&lt;&lt;</span>node<span class="token operator">-</span><span class="token operator">></span>key<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//打印key值</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//如果左节点存在加入左子树的节点</span>                q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//如果右节点存在加入右子树的节点</span>                q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="二分搜索树删除"><a href="#二分搜索树删除" class="headerlink" title="二分搜索树删除"></a>二分搜索树删除</h3><blockquote><p>删除节点，也是先来看看删除最大最小如何实现，最大最小节点上文也介绍了</p></blockquote><p><img src="/" alt="min" class="lazyload" data-src="/images/BST/tree20200320/tree9.gif"></p><blockquote><p>最小节点不存在左节点但存在右节点;</p></blockquote><p><img src="/" alt="max" class="lazyload" data-src="/images/BST/tree20200320/tree10.gif"></p><blockquote><p>最大节点不存在右节点但存在左节点;</p></blockquote><p><img src="/" alt="max" class="lazyload" data-src="/images/BST/tree20200320/tree11.gif"></p><blockquote><p>最大最小节点不存在左右子节点</p></blockquote><blockquote><p>对于这三种情况，最后一种直接将最后一个节点删除，前两种则需要将存在的一个节点替代最大最小节点</p></blockquote><blockquote><p>最大最小节点删除实现</p></blockquote><pre class="line-numbers language-cpp"><code class="language-cpp">    <span class="token comment" spellcheck="true">//以node为根的二叉树 删除最小值</span>    Node<span class="token operator">*</span> <span class="token function">removeMin</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> node<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span>left <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//如果左节点不存在，当前节点即最小</span>            Node<span class="token operator">*</span> right <span class="token operator">=</span> node<span class="token operator">-</span><span class="token operator">></span>right <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//取用右节点代替</span>            <span class="token keyword">delete</span> node<span class="token punctuation">;</span> node <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//删除节点 释放内存</span>            <span class="token keyword">return</span> right<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//返回右节点作为最小节点或者NULL</span>        <span class="token punctuation">}</span>        node<span class="token operator">-</span><span class="token operator">></span>left <span class="token operator">=</span> <span class="token function">removeMin</span><span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//递归删除</span>        <span class="token keyword">return</span> node<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//以node为根的二叉树 删除最大值</span>    Node<span class="token operator">*</span> <span class="token function">removeMax</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> node<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span>right <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//如果右节点不存在，当前节点即最大</span>            Node<span class="token operator">*</span> left <span class="token operator">=</span> node<span class="token operator">-</span><span class="token operator">></span>left <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//取用左节点代替</span>            <span class="token keyword">delete</span> node<span class="token punctuation">;</span> node <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//删除节点 释放内存</span>            <span class="token keyword">return</span> left<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//返回左节点作为最小节点或者NULL</span>        <span class="token punctuation">}</span>        node<span class="token operator">-</span><span class="token operator">></span>right <span class="token operator">=</span> <span class="token function">removeMax</span><span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//递归</span>        <span class="token keyword">return</span> node<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>那么删除任意一个节点会遇到的情况，除了上述存在但个子节点还在无节点，还存在两个节点均存在的情况</p></blockquote><p><img src="/" alt="remove" class="lazyload" data-src="/images/BST/tree20200320/tree12.gif"></p><blockquote><p>根据Hubbard Deletion思想的做法，可以从右子树中找到一个最小值，或者左子树中找到一个最大值来作为后继替换当前节点</p></blockquote><blockquote><p>删除节点具体实现</p></blockquote><pre class="line-numbers language-cpp"><code class="language-cpp">    <span class="token comment" spellcheck="true">//以node为根的二叉树 删除Key节点</span>    Node<span class="token operator">*</span> <span class="token function">remove</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> node<span class="token punctuation">,</span>Key key<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">&lt;</span> node<span class="token operator">-</span><span class="token operator">></span>key<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//左数查找</span>            node<span class="token operator">-</span><span class="token operator">></span>left <span class="token operator">=</span> <span class="token function">remove</span><span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">></span> node<span class="token operator">-</span><span class="token operator">></span>key<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//右树查找</span>            node<span class="token operator">-</span><span class="token operator">></span>right <span class="token operator">=</span> <span class="token function">remove</span><span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//找到的情况</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span>left <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//左孩子为空以及左右孩子都为空</span>                Node<span class="token operator">*</span> right <span class="token operator">=</span> node<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//右节点代替左节点的位置</span>                <span class="token keyword">delete</span> node<span class="token punctuation">;</span> node <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> right<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span>right <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//右孩子为空</span>                Node<span class="token operator">*</span> left <span class="token operator">=</span> node<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//左节点代替右节点的位置</span>                <span class="token keyword">delete</span> node<span class="token punctuation">;</span> node <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> left<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//处理左右子树都存在的情况</span>            Node<span class="token operator">*</span> successor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Node</span><span class="token punctuation">(</span><span class="token function">minimum</span><span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//找到（后继）右子树的最小值替换删除的节点（拷贝）</span>            successor<span class="token operator">-</span><span class="token operator">></span>right <span class="token operator">=</span> <span class="token function">removeMin</span><span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//替换节点指向删除右子树最小值后的右子树（已经用来替换的节点）</span>            successor<span class="token operator">-</span><span class="token operator">></span>left <span class="token operator">=</span> node<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//替换节点指向用来左子树</span>            <span class="token keyword">delete</span>  node<span class="token punctuation">;</span> node <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> successor<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//返回新树</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> node<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里实现二分搜索树最基本的常见操作(增删改查)，还有floor ceil rank select操作会不断更新，本文完整代码可以在本人gitee上找到：<a href="https://gitee.com/Vincent-Vic/DataOrganization/blob/master/BinarySearch/BinarySearchTree.h" target="_blank" rel="noopener">BST完整代码</a></p><p>欢迎各位大佬纠正错误</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Binary Search Tree&lt;/p&gt;
&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/&quot; alt=&quot;tree&quot; class=&quot;lazyload&quot; dat
      
    
    </summary>
    
    
      <category term="算法" scheme="https://vincent-vic.gitee.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="二分查找" scheme="https://vincent-vic.gitee.io/tags/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
    
      <category term="BFS" scheme="https://vincent-vic.gitee.io/tags/BFS/"/>
    
      <category term="DFS" scheme="https://vincent-vic.gitee.io/tags/DFS/"/>
    
      <category term="搜索树" scheme="https://vincent-vic.gitee.io/tags/%E6%90%9C%E7%B4%A2%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>01-复杂度3 二分查找 (20分)</title>
    <link href="https://vincent-vic.gitee.io/2020/03/19/01-fu-za-du-3-er-fen-cha-zhao-20-fen/"/>
    <id>https://vincent-vic.gitee.io/2020/03/19/01-fu-za-du-3-er-fen-cha-zhao-20-fen/</id>
    <published>2020-03-19T09:56:00.000Z</published>
    <updated>2020-03-23T15:16:15.925Z</updated>
    
    <content type="html"><![CDATA[<h6 id="本题要求实现二分查找算法。"><a href="#本题要求实现二分查找算法。" class="headerlink" title="本题要求实现二分查找算法。"></a>本题要求实现二分查找算法。</h6><h5 id="函数接口定义："><a href="#函数接口定义：" class="headerlink" title="函数接口定义："></a>函数接口定义：</h5><pre class="line-numbers language-+C"><code class="language-+C">Position BinarySearch( List L, ElementType X );<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="其中List结构定义如下："><a href="#其中List结构定义如下：" class="headerlink" title="其中List结构定义如下："></a>其中List结构定义如下：</h5><pre class="line-numbers language-+C"><code class="language-+C">typedef int Position;typedef struct LNode *List;struct LNode {    ElementType Data[MAXSIZE];    Position Last; /* 保存线性表中最后一个元素的位置 */};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>L是用户传入的一个线性表，其中ElementType元素可以通过&gt;、==、&lt;进行比较，并且题目保证传入的数据是递增有序的。函数BinarySearch要查找X在Data中的位置，即数组下标（注意：元素从下标1开始存储）。找到则返回下标，否则返回一个特殊的失败标记NotFound。</p></blockquote><h4 id="裁判测试程序样例："><a href="#裁判测试程序样例：" class="headerlink" title="裁判测试程序样例："></a>裁判测试程序样例：</h4><pre class="line-numbers language-+C"><code class="language-+C">#include <stdio.h>#include <stdlib.h>#define MAXSIZE 10#define NotFound 0typedef int ElementType;typedef int Position;typedef struct LNode *List;struct LNode {    ElementType Data[MAXSIZE];    Position Last; /* 保存线性表中最后一个元素的位置 */};List ReadInput(); /* 裁判实现，细节不表。元素从下标1开始存储 */Position BinarySearch( List L, ElementType X );int main(){    List L;    ElementType X;    Position P;    L = ReadInput();    scanf("%d", &X);    P = BinarySearch( L, X );    printf("%d\n", P);    return 0;}/* 你的代码将被嵌在这里 */<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="输入样例1："><a href="#输入样例1：" class="headerlink" title="输入样例1："></a>输入样例1：</h4><pre><code>512 31 55 89 10131</code></pre><h4 id="输出样例1："><a href="#输出样例1：" class="headerlink" title="输出样例1："></a>输出样例1：</h4><pre><code>2</code></pre><h4 id="输入样例2："><a href="#输入样例2：" class="headerlink" title="输入样例2："></a>输入样例2：</h4><pre><code>326 78 23331</code></pre><h4 id="输出样例2："><a href="#输出样例2：" class="headerlink" title="输出样例2："></a>输出样例2：</h4><pre><code>0</code></pre><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><p><img src="/" alt="二分实现" class="lazyload" data-src="/images/Base/pasted-1.png"></p><p>一图解千言，接下来再看看实现</p><pre class="line-numbers language-cpp"><code class="language-cpp">Position <span class="token function">BinarySearch</span><span class="token punctuation">(</span> List L<span class="token punctuation">,</span> ElementType X <span class="token punctuation">)</span><span class="token punctuation">{</span>    Position P<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//左边下标 从0开始</span>    <span class="token keyword">int</span> right <span class="token operator">=</span> L<span class="token operator">-</span><span class="token operator">></span>Last<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//右边下标 从最后一个开始</span>    <span class="token keyword">int</span> middle <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//找到列表的中间值</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//当左右下标（上下界）查找区间</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>L<span class="token operator">-</span><span class="token operator">></span>Data<span class="token punctuation">[</span>middle<span class="token punctuation">]</span> <span class="token operator">></span> X<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//查找数据数据比当前小，说明这个值不可能存在右边，将右边向左边缩小，继续查找</span>            right <span class="token operator">=</span> middle<span class="token number">-1</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>L<span class="token operator">-</span><span class="token operator">></span>Data<span class="token punctuation">[</span>middle<span class="token punctuation">]</span> <span class="token operator">&lt;</span> X<span class="token punctuation">)</span>  <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//查找数据比当前大，也可以说明这个值不会在左边，向右缩小，继续查找        </span>            left <span class="token operator">=</span> middle<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>L<span class="token operator">-</span><span class="token operator">></span>Data<span class="token punctuation">[</span>middle<span class="token punctuation">]</span> <span class="token operator">==</span> X<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//当前就是查找到的情况，记录下标</span>            P <span class="token operator">=</span> middle<span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                middle <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//每次查找对半</span>    <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>L<span class="token operator">-</span><span class="token operator">></span>Data<span class="token punctuation">[</span>middle<span class="token punctuation">]</span> <span class="token operator">==</span> X<span class="token punctuation">)</span>  P <span class="token operator">=</span> middle<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//再次判断，为了确认是否找到</span>    <span class="token keyword">else</span>   P <span class="token operator">=</span> NotFound<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//没有找到，按题目要求返回</span>    <span class="token keyword">return</span> P<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//返回结果</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;本题要求实现二分查找算法。&quot;&gt;&lt;a href=&quot;#本题要求实现二分查找算法。&quot; class=&quot;headerlink&quot; title=&quot;本题要求实现二分查找算法。&quot;&gt;&lt;/a&gt;本题要求实现二分查找算法。&lt;/h6&gt;&lt;h5 id=&quot;函数接口定义：&quot;&gt;&lt;a href=&quot;#函数
      
    
    </summary>
    
    
      <category term="算法" scheme="https://vincent-vic.gitee.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="二分查找" scheme="https://vincent-vic.gitee.io/tags/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://vincent-vic.gitee.io/2020/03/19/hello-world/"/>
    <id>https://vincent-vic.gitee.io/2020/03/19/hello-world/</id>
    <published>2020-03-19T03:32:00.000Z</published>
    <updated>2020-03-19T10:58:13.176Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hello-第一篇文章"><a href="#Hello-第一篇文章" class="headerlink" title="Hello 第一篇文章"></a>Hello 第一篇文章</h1><h6 id="菜鸟选手也来写Blog了"><a href="#菜鸟选手也来写Blog了" class="headerlink" title="菜鸟选手也来写Blog了"></a>菜鸟选手也来写Blog了</h6><h6 id="我是Vincent-Vic-用最菜的方式划水"><a href="#我是Vincent-Vic-用最菜的方式划水" class="headerlink" title="我是Vincent Vic,用最菜的方式划水"></a>我是Vincent Vic,用最菜的方式划水</h6><h6 id="这个Blog-用来记录我的学习笔记，让自己习惯做笔记"><a href="#这个Blog-用来记录我的学习笔记，让自己习惯做笔记" class="headerlink" title="这个Blog 用来记录我的学习笔记，让自己习惯做笔记"></a>这个Blog 用来记录我的学习笔记，让自己习惯做笔记</h6><h4 id="简单算法，数据结构，C-，Java-都是我的学习目标"><a href="#简单算法，数据结构，C-，Java-都是我的学习目标" class="headerlink" title="简单算法，数据结构，C++，Java 都是我的学习目标"></a>简单算法，数据结构，C++，Java 都是我的学习目标</h4><h3 id="Stay-hungry-Stay-foolish！"><a href="#Stay-hungry-Stay-foolish！" class="headerlink" title="Stay hungry, Stay foolish！"></a>Stay hungry, Stay foolish！</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Hello-第一篇文章&quot;&gt;&lt;a href=&quot;#Hello-第一篇文章&quot; class=&quot;headerlink&quot; title=&quot;Hello 第一篇文章&quot;&gt;&lt;/a&gt;Hello 第一篇文章&lt;/h1&gt;&lt;h6 id=&quot;菜鸟选手也来写Blog了&quot;&gt;&lt;a href=&quot;#菜鸟选手也
      
    
    </summary>
    
    
    
      <category term="个人" scheme="https://vincent-vic.gitee.io/tags/%E4%B8%AA%E4%BA%BA/"/>
    
  </entry>
  
</feed>
