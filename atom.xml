<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>菜鸟Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://vincent-vic.gitee.io/"/>
  <updated>2020-03-19T10:17:25.801Z</updated>
  <id>https://vincent-vic.gitee.io/</id>
  
  <author>
    <name>Vincent Vic</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>01-复杂度3 二分查找 (20分)</title>
    <link href="https://vincent-vic.gitee.io/2020/03/19/01-%E5%A4%8D%E6%9D%82%E5%BA%A63-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE-20%E5%88%86/"/>
    <id>https://vincent-vic.gitee.io/2020/03/19/01-%E5%A4%8D%E6%9D%82%E5%BA%A63-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE-20%E5%88%86/</id>
    <published>2020-03-19T09:56:00.000Z</published>
    <updated>2020-03-19T10:17:25.801Z</updated>
    
    <content type="html"><![CDATA[<h6 id="本题要求实现二分查找算法。"><a href="#本题要求实现二分查找算法。" class="headerlink" title="本题要求实现二分查找算法。"></a>本题要求实现二分查找算法。</h6><h5 id="函数接口定义："><a href="#函数接口定义：" class="headerlink" title="函数接口定义："></a>函数接口定义：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Position BinarySearch( List L, ElementType X );</span><br></pre></td></tr></table></figure><h5 id="其中List结构定义如下："><a href="#其中List结构定义如下：" class="headerlink" title="其中List结构定义如下："></a>其中List结构定义如下：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">typedef int Position;</span><br><span class="line">typedef struct LNode *List;</span><br><span class="line">struct LNode &#123;</span><br><span class="line">    ElementType Data[MAXSIZE];</span><br><span class="line">    Position Last; &#x2F;* 保存线性表中最后一个元素的位置 *&#x2F;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>L是用户传入的一个线性表，其中ElementType元素可以通过&gt;、==、&lt;进行比较，并且题目保证传入的数据是递增有序的。函数BinarySearch要查找X在Data中的位置，即数组下标（注意：元素从下标1开始存储）。找到则返回下标，否则返回一个特殊的失败标记NotFound。</p></blockquote><h4 id="裁判测试程序样例："><a href="#裁判测试程序样例：" class="headerlink" title="裁判测试程序样例："></a>裁判测试程序样例：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line"></span><br><span class="line">#define MAXSIZE 10</span><br><span class="line">#define NotFound 0</span><br><span class="line">typedef int ElementType;</span><br><span class="line"></span><br><span class="line">typedef int Position;</span><br><span class="line">typedef struct LNode *List;</span><br><span class="line">struct LNode &#123;</span><br><span class="line">    ElementType Data[MAXSIZE];</span><br><span class="line">    Position Last; &#x2F;* 保存线性表中最后一个元素的位置 *&#x2F;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">List ReadInput(); &#x2F;* 裁判实现，细节不表。元素从下标1开始存储 *&#x2F;</span><br><span class="line">Position BinarySearch( List L, ElementType X );</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    List L;</span><br><span class="line">    ElementType X;</span><br><span class="line">    Position P;</span><br><span class="line"></span><br><span class="line">    L &#x3D; ReadInput();</span><br><span class="line">    scanf(&quot;%d&quot;, &amp;X);</span><br><span class="line">    P &#x3D; BinarySearch( L, X );</span><br><span class="line">    printf(&quot;%d\n&quot;, P);</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;* 你的代码将被嵌在这里 *&#x2F;</span><br></pre></td></tr></table></figure><h4 id="输入样例1："><a href="#输入样例1：" class="headerlink" title="输入样例1："></a>输入样例1：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">12 31 55 89 101</span><br><span class="line">31</span><br></pre></td></tr></table></figure><h4 id="输出样例1："><a href="#输出样例1：" class="headerlink" title="输出样例1："></a>输出样例1：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure><h4 id="输入样例2："><a href="#输入样例2：" class="headerlink" title="输入样例2："></a>输入样例2：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">26 78 233</span><br><span class="line">31</span><br></pre></td></tr></table></figure><h4 id="输出样例2："><a href="#输出样例2：" class="headerlink" title="输出样例2："></a>输出样例2：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0</span><br></pre></td></tr></table></figure><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><p><img src="/" alt="alt" class="lazyload" data-src="/images/pasted-1.png"></p><p>一图解千言，接下来再看看实现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Position BinarySearch( List L, ElementType X )&#123;</span><br><span class="line">    Position P&#x3D;0;</span><br><span class="line">    int left &#x3D; 0; &#x2F;&#x2F;左边下标 从0开始</span><br><span class="line">    int right &#x3D; L-&gt;Last;  &#x2F;&#x2F;右边下标 从最后一个开始</span><br><span class="line">    int middle &#x3D; (left + right)&#x2F;2; &#x2F;&#x2F;找到列表的中间值</span><br><span class="line">    while(left &lt;&#x3D; right)&#123; &#x2F;&#x2F;当左右下标（上下界）查找区间</span><br><span class="line">        if(L-&gt;Data[middle] &gt; X)&#123;  &#x2F;&#x2F;查找数据数据比当前小，说明这个值不可能存在右边，将右边向左边缩小，继续查找</span><br><span class="line">            right &#x3D; middle-1;        </span><br><span class="line">        &#125; else if(L-&gt;Data[middle] &lt; X)  &#123;   &#x2F;&#x2F;查找数据比当前大，也可以说明这个值不会在左边，向右缩小，继续查找        </span><br><span class="line">            left &#x3D; middle+1;        </span><br><span class="line">        &#125; else if(L-&gt;Data[middle] &#x3D;&#x3D; X) &#123;    &#x2F;&#x2F;当前就是查找到的情况，记录下标</span><br><span class="line">            P &#x3D; middle;            </span><br><span class="line">            break;        </span><br><span class="line">        &#125;        </span><br><span class="line">        middle &#x3D; (left + right)&#x2F;2;    &#x2F;&#x2F;每次查找对半</span><br><span class="line">    &#125;    </span><br><span class="line">    if(L-&gt;Data[middle] &#x3D;&#x3D; X)  P &#x3D; middle;    &#x2F;&#x2F;再次判断，为了确认是否找到</span><br><span class="line">    else   P &#x3D; NotFound;     &#x2F;&#x2F;没有找到，按题目要求返回</span><br><span class="line">    return P;   &#x2F;&#x2F;返回结果</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;本题要求实现二分查找算法。&quot;&gt;&lt;a href=&quot;#本题要求实现二分查找算法。&quot; class=&quot;headerlink&quot; title=&quot;本题要求实现二分查找算法。&quot;&gt;&lt;/a&gt;本题要求实现二分查找算法。&lt;/h6&gt;&lt;h5 id=&quot;函数接口定义：&quot;&gt;&lt;a href=&quot;#函数
      
    
    </summary>
    
    
      <category term="算法" scheme="https://vincent-vic.gitee.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="二分查找" scheme="https://vincent-vic.gitee.io/tags/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://vincent-vic.gitee.io/2020/03/19/hello-world/"/>
    <id>https://vincent-vic.gitee.io/2020/03/19/hello-world/</id>
    <published>2020-03-19T03:32:00.000Z</published>
    <updated>2020-03-19T03:42:53.181Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hello-第一篇文章"><a href="#Hello-第一篇文章" class="headerlink" title="Hello 第一篇文章"></a>Hello 第一篇文章</h1><h6 id="菜鸟选手也来写Blog了"><a href="#菜鸟选手也来写Blog了" class="headerlink" title="菜鸟选手也来写Blog了"></a>菜鸟选手也来写Blog了</h6><h6 id="我是Vincent-Vic-用最菜的方式划水"><a href="#我是Vincent-Vic-用最菜的方式划水" class="headerlink" title="我是Vincent Vic,用最菜的方式划水"></a>我是Vincent Vic,用最菜的方式划水</h6><h6 id="这个Blog-用来记录我的学习笔记，让自己习惯做笔记"><a href="#这个Blog-用来记录我的学习笔记，让自己习惯做笔记" class="headerlink" title="这个Blog 用来记录我的学习笔记，让自己习惯做笔记"></a>这个Blog 用来记录我的学习笔记，让自己习惯做笔记</h6><h4 id="简单算法，数据结构，C-，Java-都是我的学习目标"><a href="#简单算法，数据结构，C-，Java-都是我的学习目标" class="headerlink" title="简单算法，数据结构，C++，Java 都是我的学习目标"></a>简单算法，数据结构，C++，Java 都是我的学习目标</h4><h3 id="Stay-hungry-Stay-foolish！"><a href="#Stay-hungry-Stay-foolish！" class="headerlink" title="Stay hungry, Stay foolish！"></a>Stay hungry, Stay foolish！</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Hello-第一篇文章&quot;&gt;&lt;a href=&quot;#Hello-第一篇文章&quot; class=&quot;headerlink&quot; title=&quot;Hello 第一篇文章&quot;&gt;&lt;/a&gt;Hello 第一篇文章&lt;/h1&gt;&lt;h6 id=&quot;菜鸟选手也来写Blog了&quot;&gt;&lt;a href=&quot;#菜鸟选手也
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
